type League {
    id: ID!
    teams: [Team!]!
    name: String!
    seasons: [Season!]!
     createdAt: Date!
     updatedAt: Date!
}

type Event {
    id: ID!
    name: String!
    isActive: Boolean!
    games(limit: Int, offset: Int): [Game!]!
#     createdAt: Date!
#     updatedAt: Date!
}

type EventsList implements PaginatedResponse {
    total: Int!
    data: [Event!]!
    offset: Int!
    limit: Int!
}

type Award {
    id: ID!
    name: String!
    # winner: User!
    season: Season!
    # createdAt: Date!
    # updatedAt: Date!
}

type Team {
    id: ID!
    name: String! # Enum perhaps?
    wins: Int!
    losses: Int!
    # createdAt: Date!
    # updatedAt: Date!
    captain: User!
    members: [User!]!
}

input CreateLeagueInput {
    name: String!
}

union LeagueResponse = ApiError | League
union EventResponse = ApiError | Event
union EventsResponse = ApiError | EventsList
union StorylinesResponse = ApiError | StorylinesList
